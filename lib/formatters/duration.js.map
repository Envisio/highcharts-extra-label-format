{"version":3,"sources":["../../src/formatters/duration.js"],"names":["PART_LENGTH","SECOND","MINUTE","HOUR","DAY","PART_LIMIT","formatDurationTotal","durationType","duration","absUnitMillisec","Math","abs","parseInt","totalDuration","floor","formatDuration","modifier","durationPart"],"mappings":";;;;;;;AAAA;;;;AAEAA,WAAW,GAAG;AACZC,EAAAA,MAAM,EAAE,IADI;AAEZC,EAAAA,MAAM,EAAE,KAFI;AAGZC,EAAAA,IAAI,EAAE,OAHM;AAIZC,EAAAA,GAAG,EAAE;AAJO,CAAd;AAOAC,UAAU,GAAG;AACXJ,EAAAA,MAAM,EAAE,EADG;AAEXC,EAAAA,MAAM,EAAE,EAFG;AAGXC,EAAAA,IAAI,EAAE;AAHK,CAAb;;AAMA,IAAMG,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,YAAD;AAAA,SAAkB,UAACC,QAAD,EAAc;AAC1D,QAAMC,eAAe,GAAGC,IAAI,CAACC,GAAL,CAASC,QAAQ,CAACJ,QAAD,CAAjB,EAA6B,EAA7B,CAAxB;AACA,QAAMK,aAAa,GAAGJ,eAAe,GAAGT,WAAW,CAACO,YAAD,CAAnD;AAEA,WAAOG,IAAI,CAACI,KAAL,CAAWD,aAAX,CAAP;AACD,GAL2B;AAAA,CAA5B;;eAOeE,cAAc,GAAG,wBAACR,YAAD,EAAeS,QAAf;AAAA,SAA4B,UAACR,QAAD,EAAc;AACxE,QAAMK,aAAa,GAAGP,mBAAmB,CAACC,YAAD,CAAnB,CAAkCC,QAAlC,CAAtB;AACA,QAAMS,YAAY,GAAGD,QAAQ,KAAK,MAAb,IAAuBX,UAAU,CAACE,YAAD,CAAjC,GAAkDM,aAAa,GAAGR,UAAU,CAACY,YAAD,CAA5E,GAA6FJ,aAAlH;AAEA,WAAO,2BAASI,YAAT,EAAuB,CAAvB,EAA0B,CAA1B,CAAP;AACD,GAL+B;AAAA,C,EAOhC;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["import padStart from '../util/pad_start';\n\nPART_LENGTH = {\n  SECOND: 1000,\n  MINUTE: 60000,\n  HOUR: 3600000,\n  DAY: 86400000,\n}\n\nPART_LIMIT = {\n  SECOND: 60,\n  MINUTE: 60,\n  HOUR: 24,\n}\n\nconst formatDurationTotal = (durationType) => (duration) => {\n  const absUnitMillisec = Math.abs(parseInt(duration), 10);\n  const totalDuration = absUnitMillisec / PART_LENGTH[durationType];\n\n  return Math.floor(totalDuration);\n}\n\nexport default formatDuration = (durationType, modifier) => (duration) => {\n  const totalDuration = formatDurationTotal(durationType)(duration);\n  const durationPart = modifier === \"PART\" && PART_LIMIT[durationType] ? totalDuration % PART_LIMIT[durationPart] : totalDuration;\n\n  return padStart(durationPart, 2, 0);\n}\n\n// export default function formatDuration(timestamp) {\n//   var numberDuration = timestamp;\n\n//   var unixSec = parseInt(numberDuration, 10) / 1000;\n//   var negative = unixSec < 0;\n//   var absUnixSec = negative ? -unixSec : unixSec;\n//   var totalMinutes = Math.floor(absUnixSec / 60);\n//   var seconds = absUnixSec % 60;\n//   var hours = Math.floor(totalMinutes / 60);\n//   var minutes = totalMinutes % 60;\n\n//   return (negative ? '-' : '') + padStart(hours, 2, 0) + \":\" + padStart(minutes, 2, 0) + \":\" + padStart(seconds, 2, 0);\n// };"],"file":"duration.js"}