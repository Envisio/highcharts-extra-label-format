{"version":3,"sources":["../../src/formatters/duration.js"],"names":["PART_LENGTH","SECOND","MINUTE","HOUR","DAY","PART_LIMIT","formatDurationTotal","durationType","duration","absUnitMillisec","Math","abs","parseInt","totalDuration","formatDuration","modifier","durationPart","floor","round"],"mappings":";;;;;;;AAAA;;;;AAEA,IAAMA,WAAW,GAAG;AAClBC,EAAAA,MAAM,EAAE,IADU;AAElBC,EAAAA,MAAM,EAAE,KAFU;AAGlBC,EAAAA,IAAI,EAAE,OAHY;AAIlBC,EAAAA,GAAG,EAAE;AAJa,CAApB;AAOA,IAAMC,UAAU,GAAG;AACjBJ,EAAAA,MAAM,EAAE,EADS;AAEjBC,EAAAA,MAAM,EAAE,EAFS;AAGjBC,EAAAA,IAAI,EAAE;AAHW,CAAnB;;AAMA,IAAMG,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,YAAD;AAAA,SAAkB,UAACC,QAAD,EAAc;AAC1D,QAAMC,eAAe,GAAGC,IAAI,CAACC,GAAL,CAASC,QAAQ,CAACJ,QAAD,CAAjB,EAA6B,EAA7B,CAAxB;AACA,QAAMK,aAAa,GAAGJ,eAAe,GAAGT,WAAW,CAACO,YAAD,CAAnD;AAEA,WAAOM,aAAP;AACD,GAL2B;AAAA,CAA5B;;AAOe,SAASC,cAAT,CAAwBP,YAAxB,EAAsCQ,QAAtC,EAAgD;AAC7D,SAAO,UAACP,QAAD,EAAc;AACnB,QAAMK,aAAa,GAAGP,mBAAmB,CAACC,YAAD,CAAnB,CAAkCC,QAAlC,CAAtB;AAEA,QAAIQ,YAAJ;;AACA,QAAID,QAAQ,KAAK,MAAb,IAAuBA,QAAQ,KAAK,sBAAxC,EAAgE;AAC9DC,MAAAA,YAAY,GAAGN,IAAI,CAACO,KAAL,CAAWJ,aAAX,CAAf;AACD,KAFD,MAEO;AACLG,MAAAA,YAAY,GAAGN,IAAI,CAACQ,KAAL,CAAWL,aAAX,CAAf;AACD;;AAED,QAAIE,QAAQ,KAAK,MAAb,IAAuBV,UAAU,CAACE,YAAD,CAArC,EAAqD;AACnDS,MAAAA,YAAY,GAAGA,YAAY,GAAGX,UAAU,CAACE,YAAD,CAAxC;AACD;;AAED,WAAO,2BAASS,YAAT,EAAuB,CAAvB,EAA0B,CAA1B,CAAP;AACD,GAfD;AAgBD;;AAAA,C,CAED;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["import padStart from '../util/pad_start';\n\nconst PART_LENGTH = {\n  SECOND: 1000,\n  MINUTE: 60000,\n  HOUR: 3600000,\n  DAY: 86400000,\n}\n\nconst PART_LIMIT = {\n  SECOND: 60,\n  MINUTE: 60,\n  HOUR: 24,\n}\n\nconst formatDurationTotal = (durationType) => (duration) => {\n  const absUnitMillisec = Math.abs(parseInt(duration), 10);\n  const totalDuration = absUnitMillisec / PART_LENGTH[durationType];\n\n  return totalDuration;\n}\n\nexport default function formatDuration(durationType, modifier) {\n  return (duration) => {\n    const totalDuration = formatDurationTotal(durationType)(duration);\n\n    let durationPart;\n    if (modifier === 'PART' || modifier === 'PART_WITHOUT_CEILING') {\n      durationPart = Math.floor(totalDuration);\n    } else {\n      durationPart = Math.round(totalDuration);\n    }\n\n    if (modifier === 'PART' && PART_LIMIT[durationType]) {\n      durationPart = durationPart % PART_LIMIT[durationType];\n    }\n\n    return padStart(durationPart, 2, 0);\n  }\n};\n\n// export default function formatDuration(timestamp) {\n//   var numberDuration = timestamp;\n\n//   var unixSec = parseInt(numberDuration, 10) / 1000;\n//   var negative = unixSec < 0;\n//   var absUnixSec = negative ? -unixSec : unixSec;\n//   var totalMinutes = Math.floor(absUnixSec / 60);\n//   var seconds = absUnixSec % 60;\n//   var hours = Math.floor(totalMinutes / 60);\n//   var minutes = totalMinutes % 60;\n\n//   return (negative ? '-' : '') + padStart(hours, 2, 0) + \":\" + padStart(minutes, 2, 0) + \":\" + padStart(seconds, 2, 0);\n// };"],"file":"duration.js"}